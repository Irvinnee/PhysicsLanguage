$TIME = 10
$DELTA = 0.001

law gravity(particle p, particle q):
    float dx = q->position[0] - p->position[0]
    float dy = q->position[1] - p->position[1]
    float dz = q->position[2] - p->position[2]

    float r2 = dx*dx + dy*dy + dz*dz + 0.00001  % unikamy dzielenia przez 0
    float r = (r2)^0.5

    float G = 200.0

    float force = G * p->mass * q->mass / r2
    float ax = force * dx / r / p->mass
    float ay = force * dy / r / p->mass
    float az = force * dz / r / p->mass

    p->velocity[0] = p->velocity[0] + ax * $DELTA
    p->velocity[1] = p->velocity[1] + ay * $DELTA
    p->velocity[2] = p->velocity[2] + az * $DELTA

    p->position[0] = p->position[0] + p->velocity[0] * $DELTA
    p->position[1] = p->position[1] + p->velocity[1] * $DELTA
    p->position[2] = p->position[2] + p->velocity[2] * $DELTA

law collision(particle p, particle q):
    float dx = q->position[0] - p->position[0]
    float dv = q->velocity[0] - p->velocity[0]
    float dist2 = dx * dx
    float min_dist2 = 0.25  % czyli 0.5^2

    bool close = dist2 <= min_dist2
    bool moving_towards = dx * dv < 0

    if (close ):
        float m1 = p->mass
        float m2 = q->mass
        float u1 = p->velocity[0]
        float u2 = q->velocity[0]

        float v1 = (u1 * (m1 - m2) + 2 * m2 * u2) / (m1 + m2)
        float v2 = (u2 * (m2 - m1) + 2 * m1 * u1) / (m1 + m2)

        print(v1)
        print(v2)
        print(True)
        p->velocity = [v1, 0, 0]
        q->velocity = [v2, 0, 0]

    float new_x = p->position[0] + p->velocity[0] * $DELTA
    p->position = [new_x, 0, 0]
    new_x = q->position[0] + q->velocity[0]* $DELTA
    q->position = [new_x, 0, 0]


system orbitalny:
    particle A
    particle B

    A->mass = 1.0
    B->mass = 1.0

    A->position = [-6.0, 0, 0]
    B->position = [6.0, 0, 0]

    A->velocity = [0, 0, 0]
    B->velocity = [0, 0, 0]  % większa prędkość, bo mniejsza masa

    <A, B & gravity>
    <B, A & gravity>
    <A,B & collision>
